/*
 * Copyright (c) 2018-2021 Chris K Wensel <chris@wensel.net>. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

apply from: 'etc/dependencyVersions.gradle'
apply from: 'etc/version.gradle'

allprojects {

  apply plugin: 'idea'
  apply plugin: 'eclipse'

  repositories {
    mavenCentral()
  }

  group = 'io.heretical'
  version = releaseVersion
}

ext.copyright = '<i>Copyright &#169; 2018-2023 Chris K Wensel. All Rights Reserved.</i>'

subprojects {

  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply from: '../etc/testing.gradle'

  sourceCompatibility = 11
  targetCompatibility = 11

  configurations {
    testArtifacts {
      extendsFrom testRuntime
    }
  }

  javadoc {
    title = "Mini Parsers ${releaseVersion}"

    failOnError = false

    configure( options ) {
      linkSource = true
      encoding = "UTF8"
      bottom = copyright
      links = [
        'http://docs.oracle.com/javase/7/docs/api/',
        'http://junit.sourceforge.net/javadoc/'
      ]
    }
  }

  task sourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
  }

  task javadocJar( type: Jar, dependsOn: javadoc ) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
  }

  task testsJar( type: Jar, dependsOn: testClasses ) {
    from sourceSets.test.output
    archiveClassifier = 'tests'
  }

  task testSourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.test.allSource
    archiveClassifier = 'test-sources'
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives testsJar
    archives testSourcesJar
    testArtifacts testsJar
    testArtifacts testSourcesJar
  }

  dependencies {
    testCompile group: 'junit', name: 'junit', version: junitVersion
  }

  test {
    include '**/*Test.class'
    ignoreFailures = !System.getProperty( 'test.haltonerror', "true" ).equals( "true" )
  }

  // publish wips via publishAllPublicationsToGitHubPackagesRepository
  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri( "https://maven.pkg.github.com/heretical/mini-parsers" )
        credentials {
          username = repoUserName ?: System.getenv( "GPR_USERNAME" )
          password = repoPassword ?: System.getenv( "GPR_TOKEN" )
        }
      }
    }

    publications {
      maven( MavenPublication ) {
        artifact sourcesJar
        artifact javadocJar

        from components.java

        pom {
          name = 'Mini-Parsers'
          description = 'An API for parsing small things.'
          url = 'http://www.heretical.io/'
          inceptionYear = '2018'
          licenses {
            license {
              name = 'Mozilla Public License, v. 2.0'
              url = 'http://mozilla.org/MPL/2.0/'
              distribution = 'repo'
            }
          }
          developers {
            developer {
              id = 'cwensel'
              name = 'Chris K Wensel'
              email = 'chris@wensel.net'
            }
          }
          scm {
            url = 'https://github.com/Heretical/mini-parsers.git'
          }
        }
      }
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.maven
  }
}

// publish releases via publishToSonatype closeAndReleaseSonatypeStagingRepository
nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set( uri( "https://s01.oss.sonatype.org/service/local/" ) )
      snapshotRepositoryUrl.set( uri( "https://s01.oss.sonatype.org/content/repositories/snapshots/" ) )

      username = repoUserName ?: System.getenv( "MCR_USERNAME" )
      password = repoPassword ?: System.getenv( "MCR_PASSWORD" )
    }
  }
}
